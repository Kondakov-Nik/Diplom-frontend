import React, { useState, useEffect } from 'react';
import { useAppSelector, useAppDispatch } from '../../hooks/hooks';
import { fetchHealthData, sendPrompt, resetChat, addMessage, Message } from './aiSlice';
import styles from './ai.module.scss';
import { jwtDecode } from 'jwt-decode';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤ –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤
const calculateHealthSummary = (records: any[]) => {
  const symptomsCount: { [key: string]: number } = {};
  const medicationsCount: { [key: string]: number } = {};

  records.forEach((record) => {
    if (record.symptom) {
      symptomsCount[record.symptom.name] = (symptomsCount[record.symptom.name] || 0) + 1;
    }
    if (record.medication) {
      medicationsCount[record.medication.name] = (medicationsCount[record.medication.name] || 0) + 1;
    }
  });

  const symptomsText =
    Object.entries(symptomsCount)
      .map(([name, count]) => `${name}: ${count} —Ä–∞–∑`)
      .join(', ') || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç';
  const medicationsText =
    Object.entries(medicationsCount)
      .map(([name, count]) => `${name}: ${count} —Ä–∞–∑`)
      .join(', ') || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç';

  return { symptomsText, medicationsText };
};

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
const predefinedPrompts = [
  {
    text: '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞ –º–µ—Å—è—Ü',
    startDaysAgo: 30,
    prompt: (symptomsText: string, medicationsText: string) => ({
      displayText: `–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞ –º–µ—Å—è—Ü\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –±—ã–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã: ${symptomsText}. –ó–∞ —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥ –æ–Ω –ø—Ä–∏–Ω–∏–º–∞–ª —Å–ª–µ–¥—É—é—â–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: ${medicationsText}.`,
      fullPrompt: `–¢—ã –≤—Ä–∞—á —Å –≤—ã—Å—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –±—ã–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã: ${symptomsText}.
      –ó–∞ —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥ –æ–Ω –ø—Ä–∏–Ω–∏–º–∞–ª —Å–ª–µ–¥—É—é—â–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: ${medicationsText}. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–µ—á–µ–Ω–∏—é. –£–∫–∞–∂–∏:
      1. –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –º–æ–≥—É—Ç –∑–Ω–∞—á–∏—Ç—å —Å–∏–º–ø—Ç–æ–º—ã.
      2. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤–ª–∏—è—é—Ç –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é.
      3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É –ª–µ—á–µ–Ω–∏—é, –≤–∫–ª—é—á–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã.
      4. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.
      5. –ö–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É.
      –ù–µ —Å—Ç–∞–≤—å —Ç–æ—á–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑, –∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ –∏ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤.`,
    }),
  },
  {
    text: '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏',
    startDaysAgo: 14,
    prompt: (symptomsText: string, medicationsText: string) => ({
      displayText: `–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –±—ã–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã: ${symptomsText}. –ó–∞ —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥ –æ–Ω –ø—Ä–∏–Ω–∏–º–∞–ª —Å–ª–µ–¥—É—é—â–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: ${medicationsText}.`,
      fullPrompt: `–¢—ã –≤—Ä–∞—á —Å –≤—ã—Å—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –±—ã–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã: ${symptomsText}.
      –ó–∞ —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥ –æ–Ω –ø—Ä–∏–Ω–∏–º–∞–ª —Å–ª–µ–¥—É—é—â–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: ${medicationsText}. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.`,
    }),
  },
  {
    text: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏',
    startDaysAgo: 0,
    prompt: () => ({
      displayText: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏',
      fullPrompt: '–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏ –¥–ª—è –æ–±—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.',
    }),
  },
];

const AiChat: React.FC = () => {
  const dispatch = useAppDispatch();
  const { conversation, healthRecords, isInitial, loading, error } = useAppSelector((state) => state.aiSlice);
  const token = useAppSelector((state) => state.authSlice.token);

  let userId: number | null = null;
  if (token) {
    try {
      const decoded: any = jwtDecode(token);
      userId = decoded.id;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    }
  }

  const [message, setMessage] = useState('');
  const [isInputEnabled, setIsInputEnabled] = useState(false);

  useEffect(() => {
    console.log('–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ healthRecords:', healthRecords);
  }, [healthRecords]);

  useEffect(() => {
    const hasAssistantResponse = conversation.some((msg: Message) => msg.role === 'assistant');
    if (hasAssistantResponse) {
      setIsInputEnabled(true);
    }
  }, [conversation]);

  if (!userId) {
    return <div className={styles.chatContainer}>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Ç —Å –ò–ò.</div>;
  }

  const endDate = new Date().toISOString().split('T')[0];

  const handleSelectPrompt = async (
    startDaysAgo: number,
    promptFn: (symptomsText: string, medicationsText: string) => { displayText: string; fullPrompt: string }
  ) => {
    if (startDaysAgo === 0) {
      const { displayText, fullPrompt } = promptFn('', '');
      const userMessage: Message = { role: 'user', content: displayText };
      dispatch(addMessage(userMessage));
      dispatch(sendPrompt([{ role: 'user' as const, content: fullPrompt }]));
      return;
    }

    const startDate = new Date();
    startDate.setDate(startDate.getDate() - startDaysAgo);
    const startDateStr = startDate.toISOString().split('T')[0];

    const result = await dispatch(fetchHealthData({ userId, startDate: startDateStr, endDate }));

    if (result.meta.requestStatus === 'fulfilled') {
      const records = result.payload as any[];
      if (records.length === 0) {
        const errorMessage: Message = { role: 'user', content: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.' };
        dispatch(addMessage(errorMessage));
        dispatch(sendPrompt([{ role: 'user' as const, content: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.' }]));
        return;
      }

      const { symptomsText, medicationsText } = calculateHealthSummary(records);
      const { displayText, fullPrompt } = promptFn(symptomsText, medicationsText);
      const userMessage: Message = { role: 'user', content: displayText };
      dispatch(addMessage(userMessage));
      dispatch(sendPrompt([{ role: 'user' as const, content: fullPrompt }]));
    } else {
      const errorMessage: Message = { role: 'user', content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–¥–æ—Ä–æ–≤—å–µ.' };
      dispatch(addMessage(errorMessage));
      dispatch(sendPrompt([{ role: 'user' as const, content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–¥–æ—Ä–æ–≤—å–µ.' }]));
    }
  };

  const handleSendMessage = () => {
    if (message.trim() === '') return;
    const userMessage: Message = { role: 'user', content: message };
    dispatch(addMessage(userMessage));
    dispatch(sendPrompt([{ role: 'user' as const, content: message }]));
    setMessage('');
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') handleSendMessage();
  };

  return (
    <div className={styles.chatContainer}>
      {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —à–∞–±–ª–æ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ */}
      <div className={styles.sidebar}>
        <button onClick={() => dispatch(resetChat())} className={styles.newChatButton}>
          –ù–æ–≤—ã–π —á–∞—Ç
        </button>
        <h3 className={styles.sidebarHeader}>–®–∞–±–ª–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã</h3>
        {predefinedPrompts.map((prompt, index) => (
          <button
            key={index}
            className={styles.promptButton}
            onClick={() => handleSelectPrompt(prompt.startDaysAgo, prompt.prompt)}
            disabled={loading}
          >
            {prompt.text}
          </button>
        ))}
      </div>

      {/* –ü—Ä–∞–≤–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
      <div className={styles.chatArea}>
        <div className={styles.headerContainer}>
          <h2 className={styles.header}>–ß–∞—Ç —Å –ò–ò</h2>
        </div>

        <div className={styles.conversationContainer}>
          <div className={styles.messages}>
            {conversation.map((msg: Message, index: number) => (
              <div
                key={index}
                className={`${styles.message} ${msg.role === 'user' ? styles.userMessage : styles.aiMessage}`}
              >
                {msg.role === 'user' ? (
                  <>
                    <span className={styles.messageContent}>{msg.content}</span>
                    <span className={styles.userIcon}>üë§</span>
                  </>
                ) : (
                  <>
                    <span className={styles.botIcon}>ü§ñ</span>
                    <span className={styles.messageContent}>
                      {msg.content || '–û—Ç–≤–µ—Ç –æ—Ç GPT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                    </span>
                  </>
                )}
              </div>
            ))}
          </div>
          <div className={styles.inputContainer}>
            <input
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
              className={styles.input}
              disabled={loading || !isInputEnabled}
            />
            <button
              onClick={handleSendMessage}
              className={styles.sendButton}
              disabled={loading || !isInputEnabled}
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </button>
          </div>
        </div>

        {loading && <p className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
        {error && <p className={styles.error}>{error}</p>}
      </div>
    </div>
  );
};

export default AiChat;
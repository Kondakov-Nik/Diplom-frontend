import React, { useEffect } from 'react';
import { useAppDispatch, useAppSelector } from '../../hooks/hooks';
import { getUserData } from '../personalpage/personalpageSlice';
import { fetchHealthRecords } from './mainSlice';
import styles from './main.module.scss';
import Cookies from 'js-cookie';
import { jwtDecode } from 'jwt-decode';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
const calculateMetrics = (healthRecords: any[]) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ healthRecords - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(healthRecords)) {
    console.warn('healthRecords is not an array:', healthRecords);
    return {
      consecutiveDaysWithoutSymptoms: 0,
      symptomsThisMonth: 0,
      medicationsThisMonth: 0,
      mostFrequentSymptom: { name: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', count: 0 },
    };
  }

  const today = new Date();
  const oneMonthAgo = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());

  // 1. –î–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤
  const symptomDates = healthRecords
    .filter(record => record.symptomId !== null)
    .map(record => new Date(record.recordDate))
    .sort((a, b) => b.getTime() - a.getTime());

  let consecutiveDaysWithoutSymptoms = 0;
  if (symptomDates.length > 0) {
    const lastSymptomDate = symptomDates[0];
    consecutiveDaysWithoutSymptoms = Math.floor(
      (today.getTime() - lastSymptomDate.getTime()) / (1000 * 60 * 60 * 24)
    );
  } else {
    consecutiveDaysWithoutSymptoms = Math.floor(
      (today.getTime() - oneMonthAgo.getTime()) / (1000 * 60 * 60 * 24)
    ); // –ï—Å–ª–∏ —Å–∏–º–ø—Ç–æ–º–æ–≤ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º –æ—Ç –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥
  }

  // 2. –°–∏–º–ø—Ç–æ–º—ã –∑–∞ –º–µ—Å—è—Ü
  const symptomsThisMonth = healthRecords.filter(record => {
    const recordDate = new Date(record.recordDate);
    return record.symptomId !== null && recordDate >= oneMonthAgo;
  }).length;

  // 3. –õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –∑–∞ –º–µ—Å—è—Ü
  const medicationsThisMonth = healthRecords.filter(record => {
    const recordDate = new Date(record.recordDate);
    return record.medicationId !== null && recordDate >= oneMonthAgo;
  }).length;

  // 4. –°–∞–º—ã–π —á–∞—Å—Ç—ã–π —Å–∏–º–ø—Ç–æ–º –∑–∞ –º–µ—Å—è—Ü
  const symptomFrequency: { [key: string]: number } = {};
  healthRecords.forEach(record => {
    const recordDate = new Date(record.recordDate);
    if (record.symptomId !== null && recordDate >= oneMonthAgo) {
      const symptomName = record.symptom?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–ø—Ç–æ–º';
      symptomFrequency[symptomName] = (symptomFrequency[symptomName] || 0) + 1;
    }
  });

  let mostFrequentSymptom = { name: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', count: 0 };
  if (Object.entries(symptomFrequency).length > 0) {
    const [name, count] = Object.entries(symptomFrequency).reduce((a, b) => (a[1] > b[1] ? a : b));
    mostFrequentSymptom = { name, count };
  }

  return {
    consecutiveDaysWithoutSymptoms,
    symptomsThisMonth,
    medicationsThisMonth,
    mostFrequentSymptom,
  };
};

const MainPage: React.FC = () => {
  const dispatch = useAppDispatch();
  const { username, loading: userLoading, error: userError } = useAppSelector(
    (state) => state.personalpageSlice
  );
  const { healthRecords, loading: recordsLoading, error: recordsError } = useAppSelector(
    (state) => state.mainSlice
  );

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø–∏—Å–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const token = Cookies.get('authToken');
    if (token) {
      const decoded: any = jwtDecode(token);
      const userId = decoded.id;

      dispatch(getUserData(userId)); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      dispatch(fetchHealthRecords(userId)); // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–¥–æ—Ä–æ–≤—å—è
    }
  }, [dispatch]);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('healthRecords:', healthRecords);

  // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–∏—Å–µ–π –∑–¥–æ—Ä–æ–≤—å—è
  const metrics = calculateMetrics(healthRecords);

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ username (–∏–º—è)
  const firstName = username ? username.split(' ')[0] : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  if (userLoading || recordsLoading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (userError) return <div className={styles.error}>–û—à–∏–±–∫–∞: {userError}</div>;
  if (recordsError) return <div className={styles.error}>–û—à–∏–±–∫–∞: {recordsError}</div>;

  return (
    <div className={styles.pageContainer}>
      {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å */}
      <div className={styles.welcomeSection}>
        <h1 className={styles.welcomeText}>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {firstName} üëã</h1>
        <p className={styles.welcomeSubtitle}>
          –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        </p>
      </div>

      {/* –ù–æ–≤—ã–µ —Ü–≤–µ—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ */}
      <div className={styles.topMetrics}>
        <div className={`${styles.topMetricCard} ${styles.consecutiveDaysWithoutSymptoms}`}>
          <h3 className={styles.topMetricLabel}>–î–Ω–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤</h3>
          <p className={styles.topMetricValue}>{metrics.consecutiveDaysWithoutSymptoms}</p>
        </div>
        <div className={`${styles.topMetricCard} ${styles.symptomsThisMonth}`}>
          <h3 className={styles.topMetricLabel}>–û—Ç–º–µ—á–µ–Ω–æ —Å–∏–º–ø—Ç–æ–º–æ–≤ –∑–∞ –º–µ—Å—è—Ü</h3>
          <p className={styles.topMetricValue}>{metrics.symptomsThisMonth}</p>
        </div>
        <div className={`${styles.topMetricCard} ${styles.medicationsThisMonth}`}>
          <h3 className={styles.topMetricLabel}>–û—Ç–º–µ—á–µ–Ω–æ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∑–∞ –º–µ—Å—è—Ü</h3>
          <p className={styles.topMetricValue}>{metrics.medicationsThisMonth}</p>
        </div>
        <div className={`${styles.topMetricCard} ${styles.mostFrequentSymptom}`}>
          <h3 className={styles.topMetricLabel}>–°–∞–º—ã–π —á–∞—Å—Ç—ã–π —Å–∏–º–ø—Ç–æ–º</h3>
          <p className={styles.topMetricValue}>
            {metrics.mostFrequentSymptom.name} ({metrics.mostFrequentSymptom.count})
          </p>
        </div>
      </div>
    </div>
  );
};

export default MainPage;